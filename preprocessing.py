# -*- coding: utf-8 -*-
"""preprocessing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1soDuxnj_Vxbt6j_-fAnIMOFEdTWscPFJ
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

"""Library python Numpy digunakan untuk komputasi matriks . Library python Matplotlib digunakan untuk presentasi data berupa grafik atau plot. Library python Pandas digunakan untuk mengambil atau mengimport data dari sumber luar."""

dataset = pd.read_csv('Bullying_2018.csv')
x = dataset.iloc[5:6].values 
y = dataset.iloc[:, -1].values

"""untuk membaca data csv menggunakan variable dataset, library pd untuk membaca dari sumber luar, csv dengan nama file. untuk membagi data, x = atribut reguler, y = label/class"""

print(x)

print(y)

from sklearn.impute import SimpleImputer
imputer = SimpleImputer(missing_values=np.nan, strategy='mean')
imputer.fit(y[:, 1:3])
y[:,  1:3] = imputer.transform(y[:, 1:3])

"""Menambahkan library sklearn
• Class SimpleImputer() digunakan untuk mengganti nilai yang
kosong dengan mean kolom.
• missing_values : nilai data yang digunakan sebagai
penanda bahwa nilai aslinya tidak ada (missing); dalam hal
ini NaN (np.nan)
• strategy : dalam hal ini rata-rata kolom ('mean'), bisa juga
menggunakan 'median', 'most_frequent' (modus),
atau 'constant’.
• Selanjutnya obyek imputer harus di fit berdasarkan kolom yang
bersangkutan menggunakan metode fit()
"""

from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
ct = ColumnTransformer(transformers=[('enconder', OneHotEncoder(), [0])], remainder='passthrough')
x = np.array(ct.fit_transform(x))

"""Matrix X yang terbentuk sebelumnya pada kolom
Country bertipe string, jadi perlu diubah ke numerik (int
atau float).
• Gunakan variable
dummy OneHotEncoder dan ColumnTransformer
"""

print(x)

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
y = le.fit_transform(y)

"""Matrix Y hanya akan diubah menjadi numerik (0, 1, dan
seterusnya) dengan LabelEncoder
"""

print(y)

from sklearn.model_selection import train_test_split
y_train, y_test = train_test_split(y, test_size = 0.2, random_state = 1)

"""test_size : proporsi test set, dalam hal ini 0.2.
• train_size: proporsi train size. Jika tidak di set, maka
akan menyesuaikan dengan test size (dalam kasus ini
0.8). Berlaku kebalikannya.
• random_state : konstan ini akan membuat hasil splitting
tetap sama antar runtime atau antar mesin. Nilai bebas.
"""

print(y_train)

print(y_test)

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
y_train[:, 3:] = sc.fit_transform(y_train[:, 3:])
y_test[:, 3:] = sc.transform(y_train[:, 3:])

"""Perlu dilakukan skala kolom-kolom yang
dibutuhkan. Perbedaan skala dapat
menyebabkan kendala dengan estimator.
• Ada tiga scaler di library scikit-learn yang sering
digunakan: StandardScaler, MinMaxScaler,
dan RobustScaler.
• StandardScaler menghilangkan mean (terpusat
pada 0) dan menskalakan ke variansi (deviasi
standar = 1), dengan asumsi data terdistribusi
normal (gauss) untuk semua fitur.
• MinMaxScaler menskalakan nilai data ke dalam
suatu range. Tidak masalah pada data nongaussian.
• Sedangkan RobustScaler (sklearn.preprocessing
.RobustScaler) mirip dengan Min-Max, hanya
saja menggunakan range interkuartil. Scaler ini
tahan terhadap outlier.
"""